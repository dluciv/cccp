#!/usr/bin/env bash

# debug
# set -x

if [[ "$1" == "ac" ]]
then # Arg Copy
  CM=$0
  shift 1
  echo "$@" | $CM c
  exit $?
elif [[ "$1" == "cf" ]]
then # Copy File
  CM=$0
  shift 1
  cat "$@" | $CM c
  exit $?
fi

autodetect_backend () {
  # Based on https://stackoverflow.com/a/8597411/539470
  if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    if [[ "$XDG_SESSION_TYPE" == "wayland" ]]; then
      echo wl-clipboard
    elif [[ "$XDG_SESSION_TYPE" == "xorg" ]]; then
      echo xclip
    else
      # likely session type is "tty"
      # sane approach is to symlink $XDG_CACHE_HOME/cccp.clip -> mcedit.clip wherever it is
      echo clipfile
    fi
  elif [[ "$OSTYPE" == "linux-android"* ]]; then
    echo termux-clipboard
  elif [[ "$OSTYPE" == "darwin"* ]]; then
    echo pbcopypaste
  elif [[ "$OSTYPE" == "cygwin" || "$OSTYPE" == "msys" || "$OSTYPE" == "win32" ]]; then
    echo powershell
  elif [[ "$OSTYPE" == "freebsd"* ]]; then
    echo xclip
  else
    >&2 echo "No idea on backend for OSTYPE '$OSTYPE'"
    echo
    exit 1
  fi
}

psh_clip_copy () {
  TMP_TXT=$(mktemp -p $TMP copy_XXXXXX.txt)
  cat >$TMP_TXT
  unix2dos -o -q $TMP_TXT
  powershell.exe -noprofile -command "[IO.File]::ReadAllText('$(cygpath -ma $TMP_TXT)', (New-Object System.Text.UTF8Encoding \$False)) | Set-Clipboard"
  rm $TMP_TXT
}

psh_clip_paste() {
  TMP_TXT=$(mktemp -p $TMP paste_XXXXXX.txt)
  powershell.exe -noprofile -command "Get-Clipboard | Set-Content -Encoding utf8 -Path '$(cygpath -ma $TMP_TXT)'" >/dev/null
  dos2unix -o -q $TMP_TXT
  head -c -1 $TMP_TXT # Skip trailing newline
  rm $TMP_TXT
}

osc52_clip_internal_copy() {
  OSC="\033]52;c;$(cat | base64)\a"

  if "${BYPASS_TMUX:-false}"; then
    if [ -n "$TMUX" ]; then
      OSC=$(printf "\033Ptmux;\033${OSC}\033\\")
    elif [ "$TERM" == "screen" ]; then
      OSC=$(printf "\033P${OSC}\033\\")
    fi
  fi

  printf "${OSC}"
}

osc52_clip_copy() {
  PYTHONPATH="$(dirname $(realpath "$0"))/backends/oscclip" python3 -c 'import oscclip; oscclip.osc_copy()'
}

osc52_clip_paste() {
  PYTHONPATH="$(dirname $(realpath "$0"))/backends/oscclip" python3 -c 'import oscclip; oscclip.osc_paste()'
}

if [ -z "$CCCP_BACKEND" ]
then # get if from config (preferred) of autodetect
  CH="${XDG_CONFIG_HOME:-$HOME/.config}"
  if [ -r "$CH/cccp.conf" ]
  then
    . $CH/cccp.conf
  else
    BACKEND=$(autodetect_backend)
  fi
else # or override
  BACKEND=$CCCP_BACKEND
fi

case $BACKEND in
  pbcopypaste)
    COPY='pbcopy'
    PASTE='pbpaste'
  ;;
  xclip)
    COPY='xclip -selection clipboard -in'
    PASTE='xclip -selection clipboard -out'
  ;;
  wl-clipboard)
    COPY='wl-copy'
    PASTE='wl-paste -n'
  ;;
  termux-clipboard)
    COPY='termux-clipboard-set'
    PASTE='termux-clipboard-get'
  ;;
  clipfile)
    CH="${XDG_CACHE_HOME:-$HOME/.cache}"
    COPY="cat >${CH}/cccp.clip"
    PASTE="cat ${CH}/cccp.clip"
  ;;
  powershell)
    # Scripting for Windows is, as usual, a kind of feast.
    PASTE='psh_clip_paste'
    COPY='psh_clip_copy'
  ;;
  osc52)
    # Probably the most advanced and sane method for remote hosts.
    # But not 100% safe. Thus not autodetected.
    COPY='osc52_clip_copy'
    PASTE='osc52_clip_paste'
  ;;
  osc52c)
    # Same as above, but only copies to keep it safe.
    # Paste manually using your terminal pasting feature.
    # Also not autodetected, being only half-functional.
    # But still this is my personal option for headless servers.
    COPY='osc52_clip_internal_copy'
    PASTE='exit 1'
  ;;
  *)
    >&2 echo "Backend '$BACKEND' not supported"
    exit 1
  ;;
esac

case $1 in
  c)
    eval $COPY
    exit $?
  ;;
  p)
    eval $PASTE
    exit $?
  ;;
  '')
    echo '`cccp c` -- copy STDIN to clipboard'
    echo '`cccp p` -- paste clipboard to STDOUT'
    echo '`cccp ac whatever you want` -- copy `whatever you want` to clipboard'
  ;;
  *)
    >&2 echo "Command '$1' not supported"
    exit 1
  ;;
esac
