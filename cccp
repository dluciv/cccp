#!/usr/bin/env bash

# debug
# set -x


# ===== Backend autodetection =====

autodetect_backend () {
  # Detect if connected via SSH https://unix.stackexchange.com/a/9607/190164
  if [[ -n "$SSH_CLIENT" ]] || [[ -n "$SSH_TTY" ]]; then
    echo osc52
  else   # Non-SSH, detect by OS https://stackoverflow.com/a/8597411/539470
    case "$OSTYPE" in
      linux-gnu*|freebsd*)
        if [[ "$XDG_SESSION_TYPE" == "wayland" ]]; then
          if command -v wl-paste; then
            echo wl-clipboard
          else
            >&2 echo "To use CCCP with Wayland, install wl-clipboard"
            echo
            exit 1
          fi
        elif [[ "$XDG_SESSION_TYPE" == "xorg" ]]; then
          if command -v xclip; then
            echo xclip
          elif command -v xsel; then
            echo xsel
          else
            >&2 echo "To use CCCP with X.org, install either xclip or xsel"
            echo
            exit 1
          fi
        else
          # likely session type is raw "tty"
          echo clipfile
        fi
      ;;
      linux-android*)
        echo termux-clipboard
      ;;
      darwin*)
        echo pbcopypaste
      ;;
      cygwin*|msys*)
        echo devclipboard
      ;;
      win32)
        echo powershell
      ;;
      *)
        >&2 echo "No idea on backend for OSTYPE '$OSTYPE'"
        echo
        exit 1
      ;;
    esac
  fi
}

# ===== Backend implementation functions =====

psh_clip_copy() {
  TMP_TXT=$(mktemp -p $TMP copy_XXXXXX.txt)
  cat >$TMP_TXT
  unix2dos -o -q $TMP_TXT
  powershell.exe -noprofile -command "[IO.File]::ReadAllText('$(cygpath -ma $TMP_TXT)', (New-Object System.Text.UTF8Encoding \$False)) | Set-Clipboard"
  rm $TMP_TXT
}

psh_clip_paste() {
  TMP_TXT=$(mktemp -p $TMP paste_XXXXXX.txt)
  powershell.exe -noprofile -command "Get-Clipboard | Set-Content -Encoding utf8 -Path '$(cygpath -ma $TMP_TXT)'" >/dev/null
  dos2unix -o -q $TMP_TXT
  head -c -1 $TMP_TXT # Skip trailing newline
  rm $TMP_TXT
}

osc52_clip_internal_copy() {
  OSC="\033]52;c;$(cat | base64)\a"

  if "${OSC52_BYPASS_MUX:-true}"; then
    if [[ -n "$TMUX" ]]; then
      OSC=$(printf "\033Ptmux;\033${OSC}\033\\")
    elif [[ "$TERM" =~ ^screen((-|\.).+)?$ ]]; then
      OSC=$(printf "\033P${OSC}\033\\")
    fi
  fi

  printf "${OSC}"
}

osc52_clip_copy() {
  # "${OSC52_BYPASS_MUX:-true}" && bypass_mux=True || bypass_mux=False
  # oscclip.osc52_copy(data: bytes, primary: bool, bypass_mux: True)
  # not yet supported, will always bypass muxes
  OSCCLIP_PATH="$(dirname $(realpath "$0"))/backends/oscclip"
  python3 -c "import sys; sys.path.insert(0, '${OSCCLIP_PATH}'); import oscclip; oscclip.osc_copy()"
}

osc52_clip_paste() {
  OSCCLIP_PATH="$(dirname $(realpath "$0"))/backends/oscclip"
  python3 -c "import sys; sys.path.insert(0, '${OSCCLIP_PATH}'); import oscclip; oscclip.osc_paste()"
}

wl_copy_nohup() {
  # wl-copy should persist to own clipboard data
  # but it should not occupy terminal
  cat | nohup wl-copy &>/dev/null
}

xclip_copy_nohup() {
  # xclip should persist to own clipboard data
  # but it should not occupy terminal
  cat | nohup xclip -selection clipboard -in &>/dev/null
}

xsel_copy_nohup() {
  # xsel should persist to own clipboard data
  # but it should not occupy terminal
  cat | nohup xsel --clipboard --input &>/dev/null
}

# ===== Configure backend and options =====

# read config file
CH="${XDG_CONFIG_HOME:-$HOME/.config}"
if [[ -r "$CH/cccp.conf" ]]; then
  . $CH/cccp.conf
fi

# if CCCP_BACKEND is set, override BACKEND
if [[ -n "$CCCP_BACKEND" ]]; then # get if from config (preferred) of autodetect
  BACKEND=$CCCP_BACKEND
fi

# if BACKEND is still not set, autodetect it
if [[ -z "$BACKEND" ]]; then
  BACKEND=$(autodetect_backend)
fi

# ===== Apply configuration =====

case $BACKEND in
  pbcopypaste)
    COPY='pbcopy'
    PASTE='pbpaste'
  ;;
  xclip)
    COPY='xclip_copy_nohup'
    PASTE='xclip -selection clipboard -out'
  ;;
  xsel)
    COPY='xsel_copy_nohup'
    PASTE='xsel --clipboard --output'
  ;;
  wl-clipboard)
    COPY='wl_copy_nohup'
    PASTE='wl-paste -n'
  ;;
  termux-clipboard)
    COPY='termux-clipboard-set'
    PASTE='termux-clipboard-get'
  ;;
  clipfile)
    CH="${XDG_CACHE_HOME:-$HOME/.cache}"
    COPY="cat >${CH}/cccp.clip"
    PASTE="cat ${CH}/cccp.clip"
  ;;
  devclipboard)
    # Scripting for Windows is, as usual, a kind of feast.
    PASTE='cat /dev/clipboard'
    COPY='cat >/dev/clipboard'
  ;;
  powershell)
    # Scripting for Windows is, as usual, a kind of feast.
    PASTE='psh_clip_paste'
    COPY='psh_clip_copy'
  ;;
  osc52)
    # Probably the most advanced and sane method for remote hosts.
    # But not 100% safe and not 100% stable. Thus not autodetected.
    ${OSC52_SHELL_COPY:-true} && COPY='osc52_clip_internal_copy' || COPY='osc52_clip_copy'
    ${OSC52_ALLOW_PASTE:-false} && PASTE='osc52_clip_paste' || PASTE='>&2 echo Pasting via osc52 is not allowed by current configuration; exit 1'
  ;;
  *)
    >&2 echo "Backend '$BACKEND' not supported"
    exit 1
  ;;
esac


# ===== Launch the tool =====

case $1 in
  c)
    eval $COPY
    exit $?
  ;;
  p)
    eval $PASTE
    exit $?
  ;;
  ac|ca)
    shift 1
    echo "$@" | eval $COPY
  ;;
  fc|cf)
    shift 1
    eval $COPY < "$@"
  ;;
  t)
    eval $PASTE | eval $COPY
    exit $?
  ;;
  '')
    echo '`cccp c`                       -- copy STDIN to clipboard'
    echo '`cccp p`                       -- paste clipboard to STDOUT'
    echo '`cccp ca|ac whatever you want` -- copy `whatever you want` to clipboard'
    echo '`cccp cf|fc file`              -- copy `file` contents to clipboard'
    echo '`cccp t`                       -- convert clipboard to plain text (cccp p | cccp c)'
    echo "Current backend is: $BACKEND"
  ;;
  *)
    >&2 echo "Command '$1' not supported"
    exit 1
  ;;
esac
